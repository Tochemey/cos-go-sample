version: "3.9"

services:
  accounts:
    image: accounts:dev
    profiles:
      - application
    depends_on:
      - chiefofstate
      - db
      - collector
    command:
      - serve
    ports:
      - "50051:50051"
      - "9092:9092"
    environment:
      SERVICE_NAME: accounts
      LOG_LEVEL: "DEBUG"
      GRPC_PORT: 50051
      COS_HOST: "chiefofstate"
      COS_PORT: 9000
      TRACE_ENABLED: "true"
      TRACE_URL: "collector:4317"
      METRICS_ENABLED: "false"
      METRICS_PORT: 9092

  writeside:
    image: accounts:dev
    profiles:
      - application
    depends_on:
      - collector
    command:
      - writeside
    ports:
      - "50051"
      - "9092"
    environment:
      LOG_LEVEL: "DEBUG"
      SERVICE_NAME: writeside
      GRPC_PORT: 50051
      TRACE_ENABLED: "true"
      TRACE_URL: "collector:4317"
      METRICS_ENABLED: "false"
      METRICS_PORT: 9092

  dbwriter:
    image: accounts:dev
    profiles:
      - application
    depends_on:
      - db
      - collector
    command:
      - dbwriter
    ports:
      - "50051"
      - "9092"
    environment:
      LOG_LEVEL: "DEBUG"
      SERVICE_NAME: dbwriter
      GRPC_PORT: 50051
      TRACE_ENABLED: "true"
      TRACE_URL: "collector:4317"
      METRICS_ENABLED: "false"
      METRICS_PORT: 9092
      DB_USER: "postgres"
      DB_PASSWORD: "changeme"
      DB_HOST: "db"
      DB_PORT: 5432
      DB_NAME: "postgres"
      DB_SCHEMA: "sample"

  db:
    image: postgres:11
    restart: always
    volumes:
      - ./db/migrations:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"

  tracer:
    image: jaegertracing/all-in-one:1.25
    container_name: tracer
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
      LOG_LEVEL: INFO
    ports:
      - "16686:16686" # frontend
      - "14268"
      - "5775"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

  collector:
    image: otel/opentelemetry-collector-contrib:0.52.0
    command: ["--config=/etc/otel/config.yaml", ""]
    depends_on:
      - tracer
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "13133:13133" # health_check extension
      - "14250:14250"
      - "14268:14268"
      - "55681:55681" # Legacy OTLP/HTTP Port
      - "55680:55679" # zpages extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "9411"  # Zipkin receiver
    volumes:
      - ./docker/otel-collector.yaml:/etc/otel/config.yaml

  chiefofstate:
    image: ghcr.io/chief-of-state/chief-of-state:dev
    volumes:
      - ./docker/readsides:/readsides
    command:
      - 'run'
    deploy:
      replicas: 1
    ports:
      - 9000
      - 9102
      - 9095
      - 5266
      - 8888
    environment:
      LOG_LEVEL: "INFO"
      LOG_STYLE: "SIMPLE"
      COS_DEPLOYMENT_MODE: docker
      COS_REPLICA_COUNT: 1
      COS_SERVICE_NAME: "chiefofstate"
      COS_ADDRESS: "0.0.0.0"
      COS_PORT: 9000
      COS_SNAPSHOT_FREQUENCY: 1
      COS_WRITE_SIDE_HOST: writeside
      COS_WRITE_SIDE_PORT: 50051
      COS_DB_CREATE_TABLES: "true"
      COS_DB_USER: "postgres"
      COS_DB_PASSWORD: "changeme"
      COS_DB_HOST: "db"
      COS_DB_PORT: 5432
      COS_DB_DB: "postgres"
      COS_DB_SCHEMA: "cos"
      COS_EVENTS_BATCH_THRESHOLD: 2
      COS_NUM_SNAPSHOTS_TO_RETAIN: 2
      COS_READ_SIDE_ENABLED: "true"
      COS_READ_SIDE_CONFIG: /readsides
      COS_READ_SIDE_CONFIG__HOST__DBWRITER: dbwriter
      COS_READ_SIDE_CONFIG__PORT__DBWRITER: 50053
      COS_READ_SIDE_CONFIG__ENABLED__DBWRITER: true
      COS_READ_SIDE_CONFIG__FAILURE_POLICY__DBWRITER: SKIP
      OTEL_JAVAAGENT_ENABLED: "true"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_SERVICE_NAME: "chiefofstate"
